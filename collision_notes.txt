COLLISION DETECTION
- get collisions
- discard collisions with normals with positive dot product with velocity
- get collision with largest overlap
- move player back along velocity vector far enough to resolve collision
- if wall/floor/slope, set flag
- modify velocity using collision normal
- move player
- check collision again
- etc

ACUTE ANGLE
- if the surface normal of a second collision normal is acute to be previously collided surface, re-apply to previous normal in addition to current normal. 
- If this happens twice, set velocity to zero and stop

FLOOR
- if a surface is close to horizontal orientation then treat it as floor
- treat all floor collision normals as up vectors
- set an “on_floor” flag
- have player move orthogonally to floor normal based on input
- jumping or moving over downward-angled edge will end “on_floor”

WALL
- if a surface is close to vertical orientation then treat it as a wall
- set “on_wall” flag
- a direction away from wall must be held or some amount of time before player can detach via input
- while on wall, add extra vertical friction
- moving across outer corner or jumping will end “on_wall”

SLOPE
- if a surface slants downwards sharply, treat as a slope
- set “on_floor” flag
- similar to ground but gravity pulls player down slope with some applied friction


GROUND COLLISION
- get all triangles that have been collided with
- get the ray intersection from the sphere center to the triangle's plane along the surface normal
- only keep triangles where the plane intersection T is between 0 and 1, and the distance from the intersection to the closest point on the triangle to the sphere center is less than some amount
- out of these triangles, get the one with the most horizontal surface
- if the surface normal is within the range of normals which can be considered ground, set on_ground to true and set the ground normal to the surface normal
- while on_ground is true, also check for ray collisions using the above method, and set on_ground to false if the check fails
- if a valid on_ground collision happens while on_ground, update on_ground normal to new surface normal
