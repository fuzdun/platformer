COLLISION DETECTION
- get collisions
- discard collisions with normals with positive dot product with velocity
- get collision with largest overlap
- move player back along velocity vector far enough to resolve collision
- if wall/floor/slope, set flag
- modify velocity using collision normal
- move player
- check collision again
- etc

ACUTE ANGLE
- if the surface normal of a second collision normal is acute to be previously collided surface, re-apply to previous normal in addition to current normal. 
- If this happens twice, set velocity to zero and stop

FLOOR
- if a surface is close to horizontal orientation then treat it as floor
- treat all floor collision normals as up vectors
- set an “on_floor” flag
- have player move orthogonally to floor normal based on input
- jumping or moving over downward-angled edge will end “on_floor”

WALL
- if a surface is close to vertical orientation then treat it as a wall
- set “on_wall” flag
- a direction away from wall must be held or some amount of time before player can detach via input
- while on wall, add extra vertical friction
- moving across outer corner or jumping will end “on_wall”

SLOPE
- if a surface slants downwards sharply, treat as a slope
- set “on_floor” flag
- similar to ground but gravity pulls player down slope with some applied friction

