New render pipeline:

- load level data into level_geometry array
- load vertices into one array
- load indices of static geometry into arrays per shader as before
- for dynamic geometry, store indices in component 

- draw all static geometry using static vertices + indices arrays
- iterate through dynamic geometry, updating indices buffer per object, and setting transform uniform and shader before drawing


pipeline start
-level geometry = shape_data, "transform", shaders

-renderables = map[shader] -> map[shapes] -> [Transform]

-for each piece of geometry:
    -for each shader:
        -append transform into renderables[shader][shape]

-for each shader in renderables
    -for each shape in shader
        -load transforms into SSBO
        -load shape vertices into VBO
        -load shape indices into EBO
        -DrawElementsInstanced
pipeline end
